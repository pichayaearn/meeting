// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/pichayaearn/meeting/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// MeetingSvc is an autogenerated mock type for the MeetingSvc type
type MeetingSvc struct {
	mock.Mock
}

// Create provides a mock function with given fields: opts
func (_m *MeetingSvc) Create(opts model.CreateMeetingOpts) error {
	ret := _m.Called(opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.CreateMeetingOpts) error); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: opts, ctx
func (_m *MeetingSvc) List(opts model.GetMeetingOpts, ctx context.Context) ([]model.Meeting, error) {
	ret := _m.Called(opts, ctx)

	var r0 []model.Meeting
	var r1 error
	if rf, ok := ret.Get(0).(func(model.GetMeetingOpts, context.Context) ([]model.Meeting, error)); ok {
		return rf(opts, ctx)
	}
	if rf, ok := ret.Get(0).(func(model.GetMeetingOpts, context.Context) []model.Meeting); ok {
		r0 = rf(opts, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Meeting)
		}
	}

	if rf, ok := ret.Get(1).(func(model.GetMeetingOpts, context.Context) error); ok {
		r1 = rf(opts, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: opts
func (_m *MeetingSvc) Update(opts model.UpdateMeetingOpts) error {
	ret := _m.Called(opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.UpdateMeetingOpts) error); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMeetingSvc creates a new instance of MeetingSvc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMeetingSvc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MeetingSvc {
	mock := &MeetingSvc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
